@inject Globals globals;

@section control {

    @{
        List<BoldReports.Models.ReportDesigner.ReportItemExtensionsModule> extensions = new List<BoldReports.Models.ReportDesigner.ReportItemExtensionsModule>(){
            new BoldReports.Models.ReportDesigner.ReportItemExtensionsModule{Name="barcode",ClassName="EJBarcode",ImageClass="customitem-barcode",DisplayName="1D Barcode",Category="Barcodes"},
            new BoldReports.Models.ReportDesigner.ReportItemExtensionsModule{Name="matrixbarcode",ClassName="EJQRBarcode",ImageClass="customitem-qrbarcode",DisplayName="2D Barcode",Category="Barcodes"}
        };
    }

    <bold-report-designer id="@Globals.REPORT_CONTROL_ID" ajax-before-load="onAjaxBeforeLoad" report-opened="onReportOpened" service-url="@Globals.DESIGNER_SERVICE_URL" toolbar-settings="ViewBag.toolbarSettings" create="controlCreate" report-item-extensions="extensions" toolbar-rendering="toolbarRendering" toolbar-click="toolbarClick" permission-settings="ViewBag.permissionSettings"/>
    <script>
        let designerInst;
        let isServerReoport;
        function controlCreate() {
            designerInst = $('#reportdesigner').data('boldReportDesigner')
            let reportName = getReportName();
            designerInst.setModel({
                reportType: 'RDLC',
                previewReport: previewReport,
                previewOptions: {
                    exportItemClick: "onExportItemClick",
                    toolbarSettings: {
                        items: ej.ReportViewer.ToolbarItems.All & ~ej.ReportViewer.ToolbarItems.Find
                    }
                }
            });
            if (reportName) {
                designerInst.openReport(reportName);
            }
        }

        function onAjaxBeforeLoad(args) {
            args.data = JSON.stringify({ reportType: "RDLC" });
        }

        function onReportOpened(args) {
            isServerReoport = args.isServerReport;
        }

        function previewReport(args) {
            if (isServerReoport) {
                let reportPath = args.model.reportPath;
                reportPath = reportPath.indexOf('//') !== -1 ? reportPath.substring(2) : reportPath
                let reportNameWithoutExt = reportPath.split(".rdlc")[0];
                datasource = rdlcData[reportNameWithoutExt];
                args.dataSets = datasource;
                args.cancelDataInputDialog = true;
            }
        }

        function toolbarRendering(args) {
            let reportControlId = '@Globals.REPORT_CONTROL_ID';
            if (args?.target && $(args.target)?.hasClass('e-rptdesigner-toolbarcontainer')) {
                if (args.action === "beforeCreate") {
                    args.items.splice(0, 0, {
                        GroupName: "customfileactionitems",
                        GroupId: reportControlId + "_custom_fileaction_group",
                        Items: [
                            {
                                prefixIcon: "b-toolbar-item e-rptdesigner-toolbar-icon e-toolbarfonticonbasic e-rptdesigner-toolbar-new",
                                tooltipText: "New",
                                id: reportControlId + "_custom_toolbar_btn_new",
                                htmlAttributes: {
                                    id: reportControlId + "_custom_toolbar_new",
                                    "aria-label": "New",
                                },
                            },
                            {
                                prefixIcon: "b-toolbar-item e-toolbarfonticonbasic e-rptdesigner-toolbar-save",
                                tooltipText: "Save",
                                id: reportControlId + "_custom_toolbar_btn_save",
                                htmlAttributes: {
                                    id: reportControlId + "_custom_toolbar_save",
                                    "aria-label": "Save",
                                },
                            },
                        ],
                    });
                }
            }
        }
        
        function toolbarClick(args) {
            if (args.click === 'Save') {
                args.cancel = true;
                designerInst.saveToDevice();
            }
        }

        function getReportName() {
            const reportNameRegex = /[\\?&]report-name=([^&#]*)/.exec(location.search);
            return reportNameRegex ? reportNameRegex[1] : undefined;
        };

    </script>

}