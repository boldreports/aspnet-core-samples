@inject Globals globals;

@section control {

    @{
        List<BoldReports.Models.ReportDesigner.ReportItemExtensionsModule> extensions = new List<BoldReports.Models.ReportDesigner.ReportItemExtensionsModule>(){
            new BoldReports.Models.ReportDesigner.ReportItemExtensionsModule{Name="barcode",ClassName="EJBarcode",ImageClass="customitem-barcode",DisplayName="1D Barcode",Category="Barcodes"},
            new BoldReports.Models.ReportDesigner.ReportItemExtensionsModule{Name="matrixbarcode",ClassName="EJQRBarcode",ImageClass="customitem-qrbarcode",DisplayName="2D Barcode",Category="Barcodes"}
        };
    }

    <bold-report-designer id="reportdesigner" ajax-before-load="onAjaxBeforeLoad" report-opened="onReportOpened" service-url="@Globals.DESIGNER_SERVICE_URL" toolbar-settings="ViewBag.toolbarSettings" create="controlCreate" report-item-extensions="extensions" toolbar-rendering="toolbarRendering" toolbar-click="toolbarClick" />
    <script>
        let designerInst;
        let isServerReoport;
        function controlCreate() {
            designerInst = $('#reportdesigner').data('boldReportDesigner')
            let reportName = getReportName();
            if (reportName == "load-large-data.rdlc") {
                designerInst.setModel({
                    reportType: 'RDLC',
                    previewReport: previewReport,
                    previewOptions: {
                        exportItemClick: "onExportItemClick",
                        toolbarSettings: {
                            items: ej.ReportViewer.ToolbarItems.All & ~ej.ReportViewer.ToolbarItems.Export & ~ej.ReportViewer.ToolbarItems.Print
                        }
                    }
                });
            }
            else {
                designerInst.setModel({
                    reportType: 'RDLC',
                    previewReport: previewReport,
                    previewOptions: {
                        exportItemClick: "onExportItemClick"
                    }
                });
            }
            if (reportName) {
                designerInst.openReport(reportName);
            }
        }

        function onAjaxBeforeLoad(args) {
            args.data = JSON.stringify({ reportType: "RDLC" });
        }

        function onReportOpened(args) {
            isServerReoport = args.isServerReport;
        }

        function previewReport(args) {
            if (isServerReoport) {
                let reportPath = args.model.reportPath;
                reportPath = reportPath.indexOf('//') !== -1 ? reportPath.substring(2) : reportPath
                let reportNameWithoutExt = reportPath.split(".rdlc")[0];
                if (reportNameWithoutExt != "load-large-data") {
                    datasource = rdlcData[reportNameWithoutExt];
                    args.dataSets = datasource;
                }
                args.cancelDataInputDialog = true;
            }
        }

        function toolbarRendering(args) {
            if ($(args.target).hasClass('e-rptdesigner-toolbarcontainer')) {
                var saveButton = ej.buildTag('li.e-rptdesigner-toolbarli e-designer-toolbar-align e-tooltxt', '', {}, {});
                var saveIcon = ej.buildTag('span.e-rptdesigner-toolbar-icon e-toolbarfonticonbasic e-rptdesigner-toolbar-save e-li-item', '', {}, { title: 'Save' });
                args.target.find('ul:first').append(saveButton.append(saveIcon));
            }
        }
        function toolbarClick(args) {
            if (args.click === 'Save') {
                args.cancel = true;
                designerInst.saveToDevice();
            }
        }

        function getReportName() {
            const reportNameRegex = /[\\?&]report-name=([^&#]*)/.exec(location.search);
            return reportNameRegex ? reportNameRegex[1] : undefined;
        };

    </script>

}